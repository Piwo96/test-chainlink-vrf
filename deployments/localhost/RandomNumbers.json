{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomNumbersReceived",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "requestor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RandomNumbersRequested",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "getRequestIdToNumbers",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomNumber",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x562d886d4f0c6dff5c22c32d7eb9305af5d99499183f2c78d5636e9d7df6c4d6",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "674140",
    "logsBloom": "0x
    "blockHash": "0x03e98bfedadea1ef493cbc278906e68778611c94d1511514b3f8ea79ff353e9f",
    "transactionHash": "0x562d886d4f0c6dff5c22c32d7eb9305af5d99499183f2c78d5636e9d7df6c4d6",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "674140",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "f2723f9da738c98418ac6105214db5c4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomNumbersReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"requestor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RandomNumbersRequested\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"getRequestIdToNumbers\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomNumber\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RandomNumbers.sol\":\"RandomNumbers\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/RandomNumbers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\ncontract RandomNumbers is VRFConsumerBaseV2 {\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    uint64 private immutable i_subscriptionId;\\n    bytes32 private immutable i_gasLane;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private constant NUM_WORDS = 6;\\n\\n    // RequestId to numbers array\\n    mapping(uint256 => uint256[]) private s_requestIdToNumbers;\\n\\n    event RandomNumbersRequested(\\n        address indexed requestor,\\n        uint256 indexed requestId\\n    );\\n    event RandomNumbersReceived(uint256 indexed requestId);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint64 subscriptionId,\\n        bytes32 gasLane,\\n        uint32 callbackGasLimit\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_subscriptionId = subscriptionId;\\n        i_gasLane = gasLane;\\n        i_callbackGasLimit = callbackGasLimit;\\n    }\\n\\n    function requestRandomNumber() external {\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RandomNumbersRequested(msg.sender, requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords)\\n        internal\\n        override\\n    {\\n        uint256[] memory numbers = new uint256[](6);\\n        for (uint16 i = 0; i < randomWords.length; i++) {\\n            numbers[i] = randomWords[i] % 50;\\n        }\\n        s_requestIdToNumbers[requestId] = numbers;\\n        emit RandomNumbersReceived(requestId);\\n    }\\n\\n    function getRequestIdToNumbers(uint256 requestId)\\n        public\\n        view\\n        returns (uint256[] memory)\\n    {\\n        return s_requestIdToNumbers[requestId];\\n    }\\n\\n    function getVrfCoordinator()\\n        public\\n        view\\n        returns (VRFCoordinatorV2Interface)\\n    {\\n        return i_vrfCoordinator;\\n    }\\n}\\n\",\"keccak256\":\"0xa212de684db5ffbc2933f20e11da83c8f6c952c12f6a3d77706356c3030c0c82\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101206040523480156200001257600080fd5b5060405162000de938038062000de9833981810160405281019062000038919062000210565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508373ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508267ffffffffffffffff1660c08167ffffffffffffffff16815250508160e081815250508063ffffffff166101008163ffffffff16815250505050505062000282565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200011782620000ea565b9050919050565b62000129816200010a565b81146200013557600080fd5b50565b60008151905062000149816200011e565b92915050565b600067ffffffffffffffff82169050919050565b6200016e816200014f565b81146200017a57600080fd5b50565b6000815190506200018e8162000163565b92915050565b6000819050919050565b620001a98162000194565b8114620001b557600080fd5b50565b600081519050620001c9816200019e565b92915050565b600063ffffffff82169050919050565b620001ea81620001cf565b8114620001f657600080fd5b50565b6000815190506200020a81620001df565b92915050565b600080600080608085870312156200022d576200022c620000e5565b5b60006200023d8782880162000138565b945050602062000250878288016200017d565b93505060406200026387828801620001b8565b92505060606200027687828801620001f9565b91505092959194509250565b60805160a05160c05160e05161010051610b16620002d36000396000610231015260006101ed0152600061020e01526000818160c901526101b101526000818160ef01526101430152610b166000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630cb4a29d146100515780631fe543e31461006f5780638678a7b21461008b578063aae2c7db14610095575b600080fd5b6100596100c5565b6040516100669190610579565b60405180910390f35b61008960048036038101906100849190610737565b6100ed565b005b6100936101ad565b005b6100af60048036038101906100aa9190610793565b61030d565b6040516100bc919061087e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019f57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101969291906108c1565b60405180910390fd5b6101a98282610377565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060066040518663ffffffff1660e01b8152600401610272959493929190610962565b602060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c491906109ca565b9050803373ffffffffffffffffffffffffffffffffffffffff167f3acf2512e26ea6e05ffdc7218a54ae46c5fda8a69ad166e6185156a1ce35377c60405160405180910390a350565b606060008083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561036b57602002820191906000526020600020905b815481526020019060010190808311610357575b50505050509050919050565b6000600667ffffffffffffffff811115610394576103936105f4565b5b6040519080825280602002602001820160405280156103c25781602001602082028036833780820191505090505b50905060005b82518161ffff161015610436576032838261ffff16815181106103ee576103ed6109f7565b5b60200260200101516104009190610a55565b828261ffff1681518110610417576104166109f7565b5b602002602001018181525050808061042e90610ab5565b9150506103c8565b5080600080858152602001908152602001600020908051906020019061045d929190610490565b50827f4756747683a520a10f3d5bc69dc62fc99aa10c4d624921ba2b4bdaca3883977260405160405180910390a2505050565b8280548282559060005260206000209081019282156104cc579160200282015b828111156104cb5782518255916020019190600101906104b0565b5b5090506104d991906104dd565b5090565b5b808211156104f65760008160009055506001016104de565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061053f61053a610535846104fa565b61051a565b6104fa565b9050919050565b600061055182610524565b9050919050565b600061056382610546565b9050919050565b61057381610558565b82525050565b600060208201905061058e600083018461056a565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6105bb816105a8565b81146105c657600080fd5b50565b6000813590506105d8816105b2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61062c826105e3565b810181811067ffffffffffffffff8211171561064b5761064a6105f4565b5b80604052505050565b600061065e610594565b905061066a8282610623565b919050565b600067ffffffffffffffff82111561068a576106896105f4565b5b602082029050602081019050919050565b600080fd5b60006106b36106ae8461066f565b610654565b905080838252602082019050602084028301858111156106d6576106d561069b565b5b835b818110156106ff57806106eb88826105c9565b8452602084019350506020810190506106d8565b5050509392505050565b600082601f83011261071e5761071d6105de565b5b813561072e8482602086016106a0565b91505092915050565b6000806040838503121561074e5761074d61059e565b5b600061075c858286016105c9565b925050602083013567ffffffffffffffff81111561077d5761077c6105a3565b5b61078985828601610709565b9150509250929050565b6000602082840312156107a9576107a861059e565b5b60006107b7848285016105c9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107f5816105a8565b82525050565b600061080783836107ec565b60208301905092915050565b6000602082019050919050565b600061082b826107c0565b61083581856107cb565b9350610840836107dc565b8060005b8381101561087157815161085888826107fb565b975061086383610813565b925050600181019050610844565b5085935050505092915050565b600060208201905081810360008301526108988184610820565b905092915050565b60006108ab826104fa565b9050919050565b6108bb816108a0565b82525050565b60006040820190506108d660008301856108b2565b6108e360208301846108b2565b9392505050565b6000819050919050565b6108fd816108ea565b82525050565b600067ffffffffffffffff82169050919050565b61092081610903565b82525050565b600061ffff82169050919050565b61093d81610926565b82525050565b600063ffffffff82169050919050565b61095c81610943565b82525050565b600060a08201905061097760008301886108f4565b6109846020830187610917565b6109916040830186610934565b61099e6060830185610953565b6109ab6080830184610953565b9695505050505050565b6000815190506109c4816105b2565b92915050565b6000602082840312156109e0576109df61059e565b5b60006109ee848285016109b5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a60826105a8565b9150610a6b836105a8565b925082610a7b57610a7a610a26565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac082610926565b915061ffff821415610ad557610ad4610a86565b5b60018201905091905056fea2646970667358221220393eb1a4f370a9fa9c56249de3d29e6e89553242100989286b17df1854b5271064736f6c63430008090033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80630cb4a29d146100515780631fe543e31461006f5780638678a7b21461008b578063aae2c7db14610095575b600080fd5b6100596100c5565b6040516100669190610579565b60405180910390f35b61008960048036038101906100849190610737565b6100ed565b005b6100936101ad565b005b6100af60048036038101906100aa9190610793565b61030d565b6040516100bc919061087e565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461019f57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016101969291906108c1565b60405180910390fd5b6101a98282610377565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060066040518663ffffffff1660e01b8152600401610272959493929190610962565b602060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c491906109ca565b9050803373ffffffffffffffffffffffffffffffffffffffff167f3acf2512e26ea6e05ffdc7218a54ae46c5fda8a69ad166e6185156a1ce35377c60405160405180910390a350565b606060008083815260200190815260200160002080548060200260200160405190810160405280929190818152602001828054801561036b57602002820191906000526020600020905b815481526020019060010190808311610357575b50505050509050919050565b6000600667ffffffffffffffff811115610394576103936105f4565b5b6040519080825280602002602001820160405280156103c25781602001602082028036833780820191505090505b50905060005b82518161ffff161015610436576032838261ffff16815181106103ee576103ed6109f7565b5b60200260200101516104009190610a55565b828261ffff1681518110610417576104166109f7565b5b602002602001018181525050808061042e90610ab5565b9150506103c8565b5080600080858152602001908152602001600020908051906020019061045d929190610490565b50827f4756747683a520a10f3d5bc69dc62fc99aa10c4d624921ba2b4bdaca3883977260405160405180910390a2505050565b8280548282559060005260206000209081019282156104cc579160200282015b828111156104cb5782518255916020019190600101906104b0565b5b5090506104d991906104dd565b5090565b5b808211156104f65760008160009055506001016104de565b5090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061053f61053a610535846104fa565b61051a565b6104fa565b9050919050565b600061055182610524565b9050919050565b600061056382610546565b9050919050565b61057381610558565b82525050565b600060208201905061058e600083018461056a565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6105bb816105a8565b81146105c657600080fd5b50565b6000813590506105d8816105b2565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61062c826105e3565b810181811067ffffffffffffffff8211171561064b5761064a6105f4565b5b80604052505050565b600061065e610594565b905061066a8282610623565b919050565b600067ffffffffffffffff82111561068a576106896105f4565b5b602082029050602081019050919050565b600080fd5b60006106b36106ae8461066f565b610654565b905080838252602082019050602084028301858111156106d6576106d561069b565b5b835b818110156106ff57806106eb88826105c9565b8452602084019350506020810190506106d8565b5050509392505050565b600082601f83011261071e5761071d6105de565b5b813561072e8482602086016106a0565b91505092915050565b6000806040838503121561074e5761074d61059e565b5b600061075c858286016105c9565b925050602083013567ffffffffffffffff81111561077d5761077c6105a3565b5b61078985828601610709565b9150509250929050565b6000602082840312156107a9576107a861059e565b5b60006107b7848285016105c9565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6107f5816105a8565b82525050565b600061080783836107ec565b60208301905092915050565b6000602082019050919050565b600061082b826107c0565b61083581856107cb565b9350610840836107dc565b8060005b8381101561087157815161085888826107fb565b975061086383610813565b925050600181019050610844565b5085935050505092915050565b600060208201905081810360008301526108988184610820565b905092915050565b60006108ab826104fa565b9050919050565b6108bb816108a0565b82525050565b60006040820190506108d660008301856108b2565b6108e360208301846108b2565b9392505050565b6000819050919050565b6108fd816108ea565b82525050565b600067ffffffffffffffff82169050919050565b61092081610903565b82525050565b600061ffff82169050919050565b61093d81610926565b82525050565b600063ffffffff82169050919050565b61095c81610943565b82525050565b600060a08201905061097760008301886108f4565b6109846020830187610917565b6109916040830186610934565b61099e6060830185610953565b6109ab6080830184610953565b9695505050505050565b6000815190506109c4816105b2565b92915050565b6000602082840312156109e0576109df61059e565b5b60006109ee848285016109b5565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610a60826105a8565b9150610a6b836105a8565b925082610a7b57610a7a610a26565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ac082610926565b915061ffff821415610ad557610ad4610a86565b5b60018201905091905056fea2646970667358221220393eb1a4f370a9fa9c56249de3d29e6e89553242100989286b17df1854b5271064736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1137,
        "contract": "contracts/RandomNumbers.sol:RandomNumbers",
        "label": "s_requestIdToNumbers",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint256,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}